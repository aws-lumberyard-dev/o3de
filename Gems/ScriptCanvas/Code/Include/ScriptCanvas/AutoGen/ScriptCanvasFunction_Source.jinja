{#
Copyright (c) Contributors to the Open 3D Engine Project.
For complete copyright and license terms please see the LICENSE at the root of this distribution.

SPDX-License-Identifier: Apache-2.0 OR MIT
#}

{% import 'ScriptCanvas_Macros.jinja' as macros %}

{%- macro CheckFunctionBranchResult(function) -%}
{% set branch = function.findall('BranchResult') %}
{% if branch is defined and branch|length() > 0 %}
{%     if branch|length() == 1 %}
true
{%     else %}
{{ macros.AddError(function, "There should be only one branch result per function.") }}
false
{%     endif %}
{% else %}
false
{% endif %}
{%- endmacro -%}

{%- macro SetBranchExecution(function, branch, branchName) -%}
{% set definition = branch.findall(branchName) %}
{%- if definition and definition|length() > 0 %}
{%     if definition|length() == 1 %}
{%         set definitionName = definition[0].attrib['Name']%}
{%         if definitionName is defined and definitionName %}
                    branchResultInfo.m_trueName = "{{definitionName}}";
{%         endif %}
{%         set definitionDescription = definition[0].attrib['Description'] %}
{%         if definitionDescription is defined and definitionDescription %}
                    branchResultInfo.m_trueToolTip = "{{definitionDescription}}";
{%         endif %}
{%     else %}
{{         macros.AddError(function, "There should be only one definition for " + branchName + " branch.") }}
{%     endif %}
{% endif -%}
{%- endmacro -%}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This code was produced with AzAutoGen, any modifications made will not be preserved.
// If you need to modify this code see:
//
// Gems\ScriptCanvas\Code\Include\ScriptCanvas\AutoGen\ScriptCanvasFunction_Source.jinja
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <AzCore/RTTI/BehaviorContext.h>
#include <ScriptCanvasAutoGenRegistry.h>

{% for ScriptCanvas in dataFiles %}
{% for Library in ScriptCanvas%}

{{- macros.Required('Include', Library, Library) -}}
{{- macros.Required('Name', Library, Library) -}}

#include "{{ Library.attrib['Include'] }}"

{% set className = macros.CleanName('ScriptCanvas' + Library.attrib['Name']) %}
{% set namespaceList = [] %}
{% set sanitizedNamespaceName = 'GlobalMethod' %}
{% if Library.attrib['Namespace'] is defined and Library.attrib['Namespace'] %}
{% set namespaceList = macros.CleanName(Library.attrib['Namespace']).split('::') %}
{% set sanitizedNamespaceName = macros.CleanName(Library.attrib['Namespace'].replace('::', '_')) %}
{% endif %}
{% set categoryName = Library.attrib['Category'] %}

{% for namespace in namespaceList %}
namespace {{namespace}}
{
{% endfor %}

    class {{className}}
        : public ScriptCanvas::IScriptCanvasFunctionRegistry
    {
    public:
        {{className}}()
        {
            ScriptCanvas::AutoGenRegistry::GetInstance()->RegisterFunction("{{sanitizedNamespaceName}}_{{className}}", this);
        }

        virtual ~{{className}}()
        {
            ScriptCanvas::AutoGenRegistry::GetInstance()->UnregisterFunction("{{sanitizedNamespaceName}}_{{className}}");
        }
 
        void Reflect(AZ::ReflectContext* context) override
        {
            if (AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(context))
            {
{% for function in Library.findall('Function') %}
                {
{{ macros.Required('Name', function, Library) }}

{%- set hasbranch = CheckFunctionBranchResult(function) -%}
{% if hasbranch|booleanTrue == true %}
{% set branch = function.findall('BranchResult')[0] %}
                    AZ::BranchOnResultInfo branchResultInfo;
{% set branchfunction = branch.attrib['Function'] %}
{%- if branchfunction is defined and branchfunction %}
{% set sanitizedBranchFunctionName = macros.CleanName(branchfunction).replace('::', '_') %}
                    branchResultInfo.m_nonBooleanResultCheckName = "{{sanitizedNamespaceName}}_{{sanitizedBranchFunctionName}}";
{% endif -%}
{% set branchwithvalue = branch.attrib['WithValue'] %}
{%- if branchwithvalue is defined and branchwithvalue.lower() == "true" %}
                    branchResultInfo.m_returnResultInBranches = true;
{% endif -%}
{{SetBranchExecution(function, branch, 'True')}}
{{SetBranchExecution(function, branch, 'False')}}
{%- endif -%}

{% set functionName = macros.CleanName(function.attrib['Name']) %}
{% set sanitizedFunctionName = macros.CleanName(function.attrib['Name']).replace('::', '_') %}
                    behaviorContext->Method("{{sanitizedNamespaceName}}_{{sanitizedFunctionName}}", &{{functionName}},
{{macros.GenerateFunctionMetaData(function)}})
                        ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Common)
{% if categoryName %}
                        ->Attribute(AZ::Script::Attributes::Category, "{{categoryName}}")
{% endif %}
{% if hasbranch|booleanTrue == true %}
                        ->Attribute(AZ::ScriptCanvasAttributes::BranchOnResult, branchResultInfo)
{% endif %}
                    ;
                }
{% endfor %}
            }
        }
    };

    static {{className}} s_{{className}};

{% for namespace in namespaceList %}
}
{% endfor %}

{{ macros.ReportErrors() }}

{% endfor %}
{% endfor %}
