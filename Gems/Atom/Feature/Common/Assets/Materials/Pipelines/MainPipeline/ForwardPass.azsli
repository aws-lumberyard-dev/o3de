/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <viewsrg.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>
#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/Lighting/StandardLighting.azsli>
#include <Atom/Features/PBR/Decals.azsli>

struct VSInput
{
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
};

struct VSOutput
{
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
};

#include <Atom/Features/Vertex/VertexHelper.azsli>

void MaterialFunction_AdjustLocalPosition(inout float3 localPosition);
void MaterialFunction_AdjustWorldPosition(inout float3 worldPosition);
void MaterialFunction_AdjustSurface(inout Surface outSurface);

VSOutput ForwardPassVS(VSInput IN)
{
    VSOutput OUT;
 
    MaterialFunction_AdjustLocalPosition(IN.m_position);

    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;
 
    MaterialFunction_AdjustWorldPosition(worldPosition);

    VertexHelper(IN, OUT, worldPosition);

    return OUT;
}

#define MATERIALPIPELINE_SHADER_HAS_PIXEL_STAGE 1

ForwardPassOutput ForwardPassPS(VSOutput IN)
{
    // ------- Surface -------

    Surface surface;
    surface.position = IN.m_worldPosition.xyz;
    surface.vertexNormal = normalize(IN.m_normal);

    // These are the values we expect MaterialFunction_EvaluateSurface to potentially replace.
    surface.normal = surface.vertexNormal;
    surface.roughnessLinear = 0.0;
    float3 baseColor = float3(0.5, 0.5, 0.5);
    float metallic = 0.0;
    float specularF0Factor = 0.5f;
    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);
    surface.clearCoat.InitializeToZero();

    MaterialFunction_AdjustSurface(surface);
    
    surface.CalculateRoughnessA();

    // ------- LightingData -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);


    // Diffuse and Specular response
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0f - lightingData.specularResponse;

    const float alpha = 1.0f;

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData, IN.m_position);

    // Apply Image Based Lighting (IBL)
    ApplyIBL(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting();

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Output -------

    ForwardPassOutput OUT;

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_diffuseColor.w = -1; // Subsurface scattering is disabled
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;

    return OUT;
}

