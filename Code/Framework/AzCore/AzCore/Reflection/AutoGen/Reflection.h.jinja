{#
All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
its licensors.

For complete copyright and license terms please see the LICENSE at the root of this
distribution (the "License"). All use of this software is governed by the License,
or, if provided, by the license below or the license accompanying this file. Do not
remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#}
{%- import "Reflection_Attributes.cpp.jinja" as Attrib -%}
{%- import "Reflection_Macros.cpp.jinja" as Macros -%}

{% macro ExtendableClass(xml, struct)                                                                %}
    class {{ struct.attrib['name'] }}
{%      if struct.attrib['extends']                                                                  %}
        : public {{ struct.attrib['extends'] }}
{%      endif                                                                                        %}
    {
{%      set fullStructName="{0}::{1}".format(xml.attrib['namespace'], struct.attrib['name'])         %}
        template<typename T> friend struct AZ::Reflection::Reflect;

    public:
        AZ_RTTI({{fullStructName}}, "{{fullStructName|createHashGuid}}"
{%-     if  struct.attrib['extends']                                                                -%}
        , {{ struct.attrib['extends'] }}
{%-     endif                                                                                       -%}
        );

        virtual ~{{struct.attrib['name']}}() = default;
{% call Macros.IfHasReflectionFunctionFlag(struct)                                                   %}
        static void Reflect(AZ::ReflectContext* context);
{% endcall                                                                                           %}
    protected:
{%-  call(variable, name, type, codeName) Macros.ListVariablesInOrder(struct)                        %}
        {{type}} {{codeName}}; 
{%-  endcall                                                                                         %}
    };
{% endmacro                                                                                         -%}


{% macro ReflectStructure(xml, struct)                                                               %}
{%  set fullStructName="{0}::{1}".format(xml.attrib['namespace'], struct.attrib['name'])             %}
    template<> 
    struct Reflect<{{fullStructName}}>
    {
    private:
        auto GetAttributesFor{{struct.attrib['name']}}()
        {
            return AZ::Reflection::BuildAttributes(
{%      set comma = joiner(",")                                                                     -%}
{%      call(group, name, value) Attrib.ListAllAttributes(struct)                                    %}
                {{ comma() }} AZ::Reflection::AttributeArgument( AZ_CRC_CE("{{group}}"), AZ_CRC_CE("{{name}}"), {{value}})
{%       endcall                                                                                    %}
            );
        }

{%-  call(variable, name, type, codeName) Macros.ListVariablesInOrder(struct)                        %}
        auto GetAttributesForVariable{{name}}()
        {
            return AZ::Reflection::BuildAttributes(
                AZ::Reflection::AttributeArgument( AZ_CRC_CE("Variable"), AZ_CRC_CE("Name"), "{{name}}")
{%      call(group, name, value) Attrib.ListAllAttributes(variable)                                  %}
                , AZ::Reflection::AttributeArgument( AZ_CRC_CE("{{group}}"), AZ_CRC_CE("{{name}}"), {{value}})
{%       endcall                                                                                     %}
            );
        }
{%-  endcall                                                                                         %}

    public:
        void operator()(IVisitor& visitor, {{fullStructName}}& value, [[maybe_unused]] const IAttributes& attributes)
        {
            auto objectAttributes = GetAttributesFor{{struct.attrib['name']}}();
            visitor.VisitObjectBegin(azrtti_typeid<{{fullStructName}}>(), 
                AZ::Reflection::AttributeCombiner(attributes, objectAttributes));
{%-  call(variable, name, type, codeName) Macros.ListVariablesInOrder(struct)                        %}
            Visit(visitor, value.{{codeName}}, GetAttributesForVariable{{name}}());
{%-  endcall                                                                                         %}
            visitor.VisitObjectEnd();
        }

        void operator()(IDescriber& describer, [[maybe_unused]] const IAttributes& attributes)
        {
            auto objectAttributes = GetAttributesFor{{struct.attrib['name']}}();
            describer.DescribeObjectBegin("{{fullStructName}}", azrtti_typeid<{{fullStructName}}>(), 
                AZ::Reflection::AttributeCombiner(attributes, objectAttributes));
{%-  call(variable, name, type, codeName) Macros.ListVariablesInOrder(struct)                        %}
            Describe<{{type}}>(describer, GetAttributesForVariable{{name}}());
{%-  endcall                                                                                         %}
            describer.DescribeObjectEnd();
        }
    };
{% endmacro                                                                                         -%}

#pragma once

#include <AzCore/Reflection/ReflectionConfig.h>
#if AZ_REFLECTION_PROTOTYPE_ENABLED

#include <AzCore/base.h>
#include <AzCore/Reflection/Reflection.h>
#include <AzCore/RTTI/RTTI.h>
#include <AzCore/std/string/string.h>
{% for xml in dataFiles                                                 -%}
{%  for include in xml.iter('Include')                                  -%}
{%      if include.attrib['in'] and include.attrib['in'] == "header"    -%}
#include <{{include.attrib['path']}}>
{%      endif                                                           -%}
{%  endfor                                                              -%}
{% endfor                                                                %}

{% call Macros.IfHasAnyReflectionFlags(dataFiles)                        %}
namespace AZ
{
    class ReflectContext;
}
{% endcall                                                              -%}

{% for xml in dataFiles                                                  %}
namespace {{ xml.attrib['namespace'] }}
{
{%  for structure in xml.iter('Struct')                                  %}
{{ ExtendableClass(xml, structure) -}}
{%  endfor                                                               %}
}
{% endfor                                                                %}

namespace AZ::Reflection
{
{% for xml in dataFiles                                                  %}
{%  for structure in xml.iter('Struct')                                  %}
{{ ReflectStructure(xml, structure) -}}
{%  endfor                                                               %}
{% endfor                                                                %}
}

#endif // AZ_REFLECTION_PROTOTYPE_ENABLED