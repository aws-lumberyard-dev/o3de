/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

#include <scenesrg.srgi>

#define TILE_DIM_X 16
#define TILE_DIM_Y 16

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4> m_inputColor;
    Texture2D<float4> m_inputDepth;
    RWTexture2D<float4> m_outputColor;
    Texture2D<float2> m_motionVectors;
    Texture2D<float4> m_lastFrameAccumulation;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    float m_minContribution;

    struct Constants
    {
        uint2 m_size;
    };
    Constants m_constantData;
}

// Do fancy LDS stuff after initial implementation works.
/*
groupshared float3 shared_samples[(TILE_DIM_X + 2) * (TILE_DIM_Y + 2)];
groupshared float shared_depth[(TILE_DIM_X + 2) * (TILE_DIM_Y + 2)];
*/

[numthreads(TILE_DIM_X, TILE_DIM_Y, 1)]
void MainCS(
    uint3 dispatchThreadID : SV_DispatchThreadID, 
    uint3 groupID : SV_GroupID, 
    uint groupIndex : SV_GroupIndex)
{
    uint2 pixelCoord = dispatchThreadID.xy;

    uint2 size = PassSrg::m_constantData.m_size;
    float2 previousPosition = -PassSrg::m_motionVectors[pixelCoord];

    float2 uvCoord = pixelCoord / float2(size);
    float2 uvOld = float2(uvCoord) + previousPosition;

    float3 color = PassSrg::m_inputColor[pixelCoord].rgb;
    float depth = PassSrg::m_inputDepth[pixelCoord].r;

    float4 lastFrameColorDepth = PassSrg::m_lastFrameAccumulation.SampleLevel(PassSrg::LinearSampler, uvOld, 0.0);

    float weight = PassSrg::m_minContribution;

    if (abs(depth - lastFrameColorDepth.a) > 0.01)
    {
        weight = 1.0f;
    }

    float invWeight = 1.0 - weight;

    PassSrg::m_outputColor[pixelCoord].rgb = lastFrameColorDepth.rgb * invWeight + color * weight;
    PassSrg::m_outputColor[pixelCoord].a = depth;
}